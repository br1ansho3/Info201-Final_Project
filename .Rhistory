})
}
shinyApp(ui = ui, server = server)
#ui
ui <- navbarPage("Nutrition and Recipe",
tabPanel("Calories calculator",
sidebarLayout(
sidebarPanel(
gender_panel,
weight_panel,
height_panel,
age_panel,
textOutput("BMI")),
mainPanel(
breakfast_panel,
lunch_panel,
dinner_panel,
textOutput("calories_total")))))
#server
server <- function(input, output) {
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- reactive(response_data$calories$value)
#get data 2
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = lunch) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_two <- reactive(response_data$calories$value)
#get data 3
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = dinner) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_three <- reactive(response_data$calories$value)
total_calories <- reactive(calories_one + calories_two + calories_three)
output$calories_total <- renderText({
return(paste0("$", total_calories)
)})
#BMI
BMI_cal <- reactive(655.1 + 9.6*weight + 1.9*height- 4.7*age)
output$BMI <- renderText({
return(BMI_cal)
})
}
shinyApp(ui = ui, server = server)
#ui
ui <- navbarPage("Nutrition and Recipe",
tabPanel("Calories calculator",
sidebarLayout(
sidebarPanel(
gender_panel,
weight_panel,
height_panel,
age_panel,
textOutput("BMI")),
mainPanel(
breakfast_panel,
lunch_panel,
dinner_panel,
textOutput("calories_total")))))
#server
server <- function(input, output) {
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input()$breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- reactive(response_data$calories$value)
#get data 2
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input()$lunch) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_two <- reactive(response_data$calories$value)
#get data 3
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input()$dinner) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_three <- reactive(response_data$calories$value)
total_calories <- reactive(calories_one + calories_two + calories_three)
output$calories_total <- renderText({
return(paste0("$", total_calories)
)})
#BMI
BMI_cal <- reactive(655.1 + 9.6*weight + 1.9*height- 4.7*age)
output$BMI <- renderText({
return(BMI_cal)
})
}
shinyApp(ui = ui, server = server)
#ui
ui <- navbarPage("Nutrition and Recipe",
tabPanel("Calories calculator",
sidebarLayout(
sidebarPanel(
gender_panel,
weight_panel,
height_panel,
age_panel,
textOutput("BMI")),
mainPanel(
breakfast_panel,
lunch_panel,
dinner_panel,
textOutput("calories_total")))))
#server
server <- function(input, output) {
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- reactive(response_data$calories$value)
#get data 2
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$lunch) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_two <- reactive(response_data$calories$value)
#get data 3
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$dinner) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_three <- reactive(response_data$calories$value)
total_calories <- reactive(calories_one + calories_two + calories_three)
output$calories_total <- renderText({
return(paste0("$", total_calories)
)})
#BMI
BMI_cal <- reactive(655.1 + 9.6*weight + 1.9*height- 4.7*age)
output$BMI <- renderText({
return(BMI_cal)
})
}
shinyApp(ui = ui, server = server)
#ui
ui <- navbarPage("Nutrition and Recipe",
tabPanel("Calories calculator",
sidebarLayout(
sidebarPanel(
gender_panel,
weight_panel,
height_panel,
age_panel,
textOutput("BMI")),
mainPanel(
breakfast_panel,
lunch_panel,
dinner_panel,
textOutput("calories_total")))))
#server
server <- function(input, output) {
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- reactive(fromJSON(response_text))
calories_one <- response_data()$calories$value
#get data 2
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$lunch) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- reactive(fromJSON(response_text))
calories_two <- response_data()$calories$value
#get data 3
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$dinner) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- reactive(fromJSON(response_text))
calories_three <- response_data()$calories$value
total_calories <- reactive(calories_one + calories_two + calories_three)
output$calories_total <- renderText({
return(paste0("$", total_calories)
)})
#BMI
BMI_cal <- reactive(655.1 + 9.6*weight + 1.9*height- 4.7*age)
output$BMI <- renderText({
return(BMI_cal)
})
}
shinyApp(ui = ui, server = server)
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- response_data$calories$value
response_ <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text_one <- content(response, type = "text", encoding = "ISO-8859-1")
response_data_one <- fromJSON(response_text)
response_ <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
response_ <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- response_data$calories$value
View(response_data)
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
View(response_data)
install.packages(plumber)
install.packages("plumber")
library(plumber)
library(shiny); runApp('test.R')
calories_two <- response_data$calories$value
calories_two <- response_data$calories$value
source('~/Desktop/INFO201/project/Final_Project/Info201-Final_Project/test.R')
shinyApp(ui=ui, server=server)
#server
server <- function(input, output, session) {
#get command
output$calories_total <- renderUI ({
breakfast_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
breakfast_text <- content(breakfast_response, type = "text", encoding = "ISO-8859-1")
breakfast_data <- fromJSON(breakfast_text)
calories_one <- breakfast_data$calories$value
#get data 2
lunch_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$lunch) )
lunch_text <- content(lunch_response, type = "text", encoding = "ISO-8859-1")
lunch_data <- fromJSON(lunch_text)
calories_two <- lunch_data$calories$value
#get data 3
dinner_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$dinner) )
dinner_text <- content(dinner_response, type = "text", encoding = "ISO-8859-1")
dinner_data <- fromJSON(dinner_text)
calories_three <- dinner_data$calories$value
total_calories <- reactive(calories_one + calories_two + calories_three)
return(total_calories) )}
#BMI
BMI_cal <- reactive(655.1 + 9.6*input$weight + 1.9*input$height- 4.7*input$age)
output$BMI <- renderText({
return(BMI_cal)
})
}
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("btn", "Toggle Textbox"),
textOutput("btn_val"),
uiOutput("textbox_ui")
))
server <- shinyServer(function(input, output, session) {
output$btn_val <- renderPrint(print(input$btn))
textboxToggle <- reactive({
if (input$btn %% 2 == 1) {
textInput("textin", "Write something:", value = "Hello World!")
}
})
output$textbox_ui <- renderUI({ textboxToggle() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("btn", "Toggle Textbox"),
textOutput("btn_val"),
uiOutput("textbox_ui")
))
server <- shinyServer(function(input, output, session) {
output$btn_val <- renderPrint(print(input$btn))
textboxToggle <- reactive({
if (input$btn %% 2 == 1) {
textInput("textin", "Write something:", value = "Hello World!")
}
})
output$textbox_ui <- renderUI({ textboxToggle() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
observeEvent(input$add_btn, {counter$n <- counter$n + 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) counter$n <- counter$n - 1
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "Hello World!")
})
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
observeEvent(input$add_btn, {counter$n <- counter$n + 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) counter$n <- counter$n - 1
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "Hello World!")
})
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
observeEvent(input$add_btn, {counter$n <- counter$n + 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) counter$n <- counter$n - 1
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "Hello World!")
})
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
#Track the number of input boxes previously
prevcount <-reactiveValues(n = 0)
observeEvent(input$add_btn, {
counter$n <- counter$n + 1
prevcount$n <- counter$n - 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) {
counter$n <- counter$n - 1
prevcount$n <- counter$n + 1
}
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
# If the no. of textboxes previously where more than zero, then
#save the text inputs in those text boxes
if(prevcount$n > 0){
vals = c()
if(prevcount$n > n){
lesscnt <- n
isInc <- FALSE
}else{
lesscnt <- prevcount$n
isInc <- TRUE
}
for(i in 1:lesscnt){
inpid = paste0("textin",i)
vals[i] = input[[inpid]]
}
if(isInc){
vals <- c(vals, "New text box")
}
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = vals[i])
})
}else{
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "New text box")
})
}
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp()
