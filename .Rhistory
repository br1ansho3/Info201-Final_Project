MSB=0.4167
MSAB= 0.6019
MSE= 1.5000
FA<-MSA/MSAB
FB<-MSB/MSAB
FAB<-MSAB/MSE
PA<-pf(FA,2,2,lower.tail = F)
PB<-pf(FB,1,2,lower.tail = F)
PAB<-pf(FAB,2,54,lower.tail = F)
data1<-data.frame(c(FA,FB,FAB),c(PA,PB,PAB))
colnames(data1)<-c("F-ratio","Pr(>F)")
rownames(data1)<-c("A","B","A:B")
data1
var_alpha = (MSA - MSAB)/(b*n)
var_beta = (MSB - MSAB)/(a*n)
var_alpha_beta = (MSAB-MSE)/n
var_epsilon = MSE
c(var_alpha, var_beta, var_alpha_beta, var_epsilon)
var_y<-sum((y-mean(y))^2)/(a*b*n-1)
var_y
sum(c(var_alpha, var_beta, var_alpha_beta, var_epsilon))
MSA=11.0019
MSB=0.4167
MSAB= 0.6019
MSE= 1.5000
FA<-MSA/MSAB
FB<-MSB/MSAB
FAB<-MSAB/MSE
PA<-pf(FA,9,9,lower.tail = F)
PB<-pf(FB,1,9,lower.tail = F)
PAB<-pf(FAB,9,54,lower.tail = F)
data1<-data.frame(c(FA,FB,FAB),c(PA,PB,PAB))
colnames(data1)<-c("F-ratio","Pr(>F)")
rownames(data1)<-c("A","B","A:B")
data1
var_alpha = (MSA - MSAB)/(b*n)
var_beta = (MSB - MSAB)/(a*n)
var_alpha_beta = (MSAB-MSE)/n
var_epsilon = MSE
c(var_alpha, var_beta, var_alpha_beta, var_epsilon)
var_y<-sum((y-mean(y))^2)/(a*b*n-1)
var_y
sum(c(var_alpha, var_beta, var_alpha_beta, var_epsilon))
MSA=11.0019
MSB=0.4167
MSAB= 0.6019
MSE= 1.5000
FA<-MSA/MSAB
FB<-MSB/MSAB
FAB<-MSAB/MSE
PA<-pf(FA,9,9,lower.tail = F)
PB<-pf(FB,1,9,lower.tail = F)
PAB<-pf(FAB,9,40,lower.tail = F)
data1<-data.frame(c(FA,FB,FAB),c(PA,PB,PAB))
colnames(data1)<-c("F-ratio","Pr(>F)")
rownames(data1)<-c("A","B","A:B")
data1
rm(list=ls(all=TRUE))
library(AlgDesign)
a = 10
n = 3
b = 2
y<-c(50,49,50,50,48,51,52,52,51,51,51,51,53,50,50,54,52,51,49,51,50,48,50,51,48,49,48,48,49,48,52,50,50,52,50,50,51,51,51,51,50,50,52,50,49,53,48,50,50,51,50,51,48,49,47,46,49,46,47,48)
design<-gen.factorial(c(n,b,a),varNames = c("Rep","B","A"),factors = "all")
attach(design)
lm.1<-lm(y~A*B)
anova(lm.1)
MSA=11.0019
MSB=0.4167
MSAB= 0.6019
MSE= 1.5000
FA<-MSA/MSAB
FB<-MSB/MSAB
FAB<-MSAB/MSE
PA<-pf(FA,9,9,lower.tail = F)
PB<-pf(FB,1,9,lower.tail = F)
PAB<-pf(FAB,9,40,lower.tail = F)
data1<-data.frame(c(FA,FB,FAB),c(PA,PB,PAB))
colnames(data1)<-c("F-ratio","Pr(>F)")
rownames(data1)<-c("A","B","A:B")
data1
var_alpha = (MSA - MSAB)/(b*n)
var_beta = (MSB - MSAB)/(a*n)
var_alpha_beta = (MSAB-MSE)/n
var_epsilon = MSE
c(var_alpha, var_beta, var_alpha_beta, var_epsilon)
var_y<-sum((y-mean(y))^2)/(a*b*n-1)
var_y
sum(c(var_alpha, var_beta, var_alpha_beta, var_epsilon))
c(PA,PB,PAB)
data1
PA<-pf(FA,9,9,lower.tail = F)
PA<-pf(FA,9,9)
PA
MSA=11.0019
MSB=0.4167
MSAB= 0.6019
MSE= 1.5000
FA<-MSA/MSAB
FB<-MSB/MSAB
FAB<-MSAB/MSE
PA<-pf(FA,9,9,lower.tail = F)
PB<-pf(FB,1,9,lower.tail = F)
PAB<-pf(FAB,9,40,lower.tail = F)
data1<-data.frame(c(FA,FB,FAB),c(PA,PB,PAB))
colnames(data1)<-c("F-ratio","Pr(>F)")
rownames(data1)<-c("A","B","A:B")
data1
eff<-2*na.omit(lm.1$coefficients[-1])
qqnorm(eff)
sort(eff)
abline(median(eff)-1,10)
rm(list=ls(all=TRUE))
library(AlgDesign)
y<-c(166.61,115.26,221.45,139.22,165.71,138.71,205,180.08,165.4,
108.24,167.1,141.9,178.93,138.27,195.58,105.04,179.24,116.55,
184.69,105.32,160.49,125.19,210.97,115.03,253.56,137.68,216.82,
202.47,200,198.56,279.55,194.37)
design<-gen.factorial(2,5,varNames = c("R","T","S","B","O"))
attach(design)
data1<-data.frame(y,R,T,S,B,O)
data1[,-1]
order1 <- c(25,7,29,2,5,3,4,28,30,8,6,31,27,32,26,1)
data1[order1,]
order2<-c(9,17,23,19,14,21,11,10,12,13,18,15,20,24,16,22)
data1[order2,]
data1
block<-B*O
lm.1<-lm(y~R*T*S*B*O+block)
anova(lm.1)
eff<-2*na.omit(lm.1$coefficients[-1])
qqnorm(eff)
sort(eff)
abline(median(eff)-1,10)
lm.2<-lm(y~R+T+B+O+block)
anova(lm.2)
tidyverse
library(tidyverse)
install.packages("tidyverse")
tidyverse
library(tidyverse)
library(tidyverse)
# installs tidyverse if you don't have it
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse) # loading tidyverse library
# installs tidyverse if you don't have it
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse) # loading tidyverse library
install.packages("tidyverse")
# installs tidyverse if you don't have it
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse) # loading tidyverse library
library(tidyverse) # loading tidyverse library
remotes::update_packages("rlang")
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
install.packages("tidyverse")
library(tidyverse)
install.packages("rlang")
library(rlang)
install.packages("rlang")
install.packages("dplyr")
library(dplyr)
library(rland)
library(rlang)
sessionInfo()
install.packages("rlang")
install.packages("tidyverse")
# installs tidyverse if you don't have it
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse) # loading tidyverse library
if (!require("datasets")) install.packages("datasets")
library(datasets)
data(iris) # loading dataset
help(iris) # documentation on dataset
# TODO: What is this dataset about? What columns/features do you expect to see? How many rows/instances do you expect?
# TODO: What exploratory questions do you have about this dataset?
str(iris)
# TODO: Which columns are numeric? Which are not? Are these types reasonable?
iris %>% select(Species, Sepal.Length, Sepal.Width)
# TODO: select Species, Petal.Length, and Petal.Width from the iris dataframe
ggplot(iris, aes(x=Petal.Width)) +
geom_histogram()
# TODO: Given what you know about the iris data, what information may be _missing_ from this histogram?
ggplot(iris, aes(x=Petal.Width, fill=Species)) +
geom_histogram()
# TODO: What did you learn from this histogram that you couldn't from the previous one?
ggplot(iris, aes(x=Petal.Width, y=..density.., fill=Species)) +
geom_density(adjust = 1, # adjust is smoothing parameter. greater => smoother
alpha = 0.7) # make fill a bit transparent
# TODO: The "adjust" parameter in geom_density is a smoothing parameter (known as bandwidth) which you can change freely (as long as it is >0). In the plot above, change the parameter to 0.5, and then 2. How do different bandwidths affect the density estimation? Feel free to try tiny (e.g. 0.01) or large numbers (e.g. 10)!
ggplot(iris, aes(x=Petal.Width, y=..density.., fill=Species)) +
geom_histogram() +
geom_density(adjust = 2, # adjust is smoothing parameter. greater => smoother
alpha=0 # hide the fill of density estimator
)#higher bin is, smoother you would get
ggplot(iris, aes(sample=Petal.Length)) +
geom_qq() +
geom_qq_line()
# line does not fit well => data likely isn't normal
# TODO: Determine which species of flower has the distribution of petal length that appears most normally distributed
p.vio <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_violin()
p.vio
# adding a boxplot to violin plot
p.vio + geom_boxplot(width=0.2)
# adding mean + std dev
p.vio + stat_summary(fun.data=mean_sdl, # show mean + std dev
fun.args=list(mult=1), # show 1 std dev
color="blue") # make it blue!
# TODO: What does the violin plot show you that a boxplot does not?
ggplot(iris, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
# installs tidyverse if you don't have it
if (!require("tidyverse")) install.packages("tidyverse")
library(tidyverse) # loading tidyverse library
if (!require("datasets")) install.packages("datasets")
library(datasets)
data(iris) # loading dataset
help(iris) # documentation on dataset
# TODO: What is this dataset about? What columns/features do you expect to see? How many rows/instances do you expect?
# TODO: What exploratory questions do you have about this dataset?
str(iris)
# TODO: Which columns are numeric? Which are not? Are these types reasonable?
ggplot(iris, aes(x=Petal.Width)) +
geom_histogram()
# TODO: Given what you know about the iris data, what information may be _missing_ from this histogram?
ggplot(iris, aes(x=Petal.Width, fill=Species)) +
geom_histogram()
# TODO: What did you learn from this histogram that you couldn't from the previous one?
ggplot(iris, aes(x=Petal.Width, y=..density.., fill=Species)) +
geom_density(adjust = 1, # adjust is smoothing parameter. greater => smoother
alpha = 0.7) # make fill a bit transparent
# TODO: The "adjust" parameter in geom_density is a smoothing parameter (known as bandwidth) which you can change freely (as long as it is >0). In the plot above, change the parameter to 0.5, and then 2. How do different bandwidths affect the density estimation? Feel free to try tiny (e.g. 0.01) or large numbers (e.g. 10)!
ggplot(iris, aes(x=Petal.Width, y=..density.., fill=Species)) +
geom_histogram() +
geom_density(adjust = 2, # adjust is smoothing parameter. greater => smoother
alpha=0 # hide the fill of density estimator
)#higher bin is, smoother you would get
ggplot(iris, aes(sample=Petal.Length)) +
geom_qq() +
geom_qq_line()
# line does not fit well => data likely isn't normal
# TODO: Determine which species of flower has the distribution of petal length that appears most normally distributed
p.vio <- ggplot(iris, aes(Species, Sepal.Length)) +
geom_violin()
p.vio
# adding a boxplot to violin plot
p.vio + geom_boxplot(width=0.2)
# adding mean + std dev
p.vio + stat_summary(fun.data=mean_sdl, # show mean + std dev
fun.args=list(mult=1), # show 1 std dev
color="blue") # make it blue!
# TODO: What does the violin plot show you that a boxplot does not?
ggplot(iris, aes(x=Petal.Length, y=Petal.Width)) +
geom_point()
# TODO: Add "color" to the asthetics parameter (aes) so that points are colored by species.
# TODO: Make a scatter plot comparing sepal length to sepal width, coloring points by species
if (!require("GGally")) install.packages("GGally")
library(GGally)
ggscatmat(iris, color="Species")
# TODO: Given these features, which flower is the most different compared to the other two?
# TODO: What data comparisons would help you determine what species a flower was?
install.packages("AlgDesign")
data2<-na.omit(data1)[,-2]
str(data2)
setwd("/Users/Rachel/Downloads")
install.packages("openxlsx")
install.packages("tidyverse")
library("openxlsx")
library("tidyverse")
data1=read.xlsx("Grades.xlsx",startRow = 7,colNames = T)
data1$Appl_Type<-as.factor(data1$Appl_Type)
str(data1)
data2<-na.omit(data1)[,-2]
str(data2)
results='hide'
setwd("/Users/Rachel/Downloads")
install.packages("openxlsx")
install.packages("tidyverse")
library("openxlsx")
library("tidyverse")
install.packages("openxlsx")
results='hide'
setwd("/Users/Rachel/Downloads",)
results='hide'
setwd("/Users/Rachel/Downloads",)
results='hide'
setwd("/Users/Rachel/Downloads")
install.packages("openxlsx")
install.packages("tidyverse")
library("openxlsx")
library("tidyverse")
setwd("/Users/Rachel/Downloads")
install.packages("openxlsx", repos = "http://cran.us.r-project.org")
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
library("openxlsx")
library("tidyverse")
install.packages("openxlsx", repos = "http://cran.us.r-project.org")
knitr::opts_chunk$set(results = 'hide')
setwd("/Users/Rachel/Downloads")
install.packages("openxlsx", repos = "http://cran.us.r-project.org")
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
library("openxlsx")
library("tidyverse")
data1=read.xlsx("Grades.xlsx",startRow = 7,colNames = T)
ggplot(data2, aes(x=SATR_C, y=..density..))+
geom_histogram(bins=20) + geom_density(adjust = 0.5,alpha=0)+ggtitle("Figure I")
ggplot(data2, aes(x=SATR_C, y=..density..))+
geom_histogram(bins=20) + geom_density(adjust = 0.5,alpha=0)+ggtitle("Figure I")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
UN11
data(UN11)
install.packages("spec=[];")
install.packages("alr4")
library(alr4)
UN11
lm(log(UN11$fertility)~log(UN11$ppgdp)+UN11$lifeExpF)
library(alr4)
library(alr4)
Transact
data_3 <- Transact
data_3$a <- (t1+t2)/2
lm1 <- lm(time~t1+t2, data_3)
data_3$a <- (data_3$t1+data_3$t2)/2
data_3$d <- (data_3$t1-data_3$t2)
lm1 <- lm(time~t1+t2, data_3)
lm2 <- lm(time~a+d, data_3)
lm3 <- lm(time~t2+d)
data_3$a <- (data_3$t1+data_3$t2)/2
data_3$d <- (data_3$t1-data_3$t2)
lm1 <- lm(time~t1+t2, data_3)
lm2 <- lm(time~a+d, data_3)
lm3 <- lm(time~t2+d, data_3)
lm4 <- lm(t1+t2+a+d, data_3)
data_3$a <- (data_3$t1+data_3$t2)/2
data_3$d <- (data_3$t1-data_3$t2)
lm1 <- lm(time~t1+t2, data_3)
lm2 <- lm(time~a+d, data_3)
lm3 <- lm(time~t2+d, data_3)
lm4 <- lm(time~t1+t2+a+d, data_3)
lm4
lm1
lm2
lm3
lm4
cor(data_3$t2, data_3$t1)
cor(data_3$t2, data_3$d)
data_4 <- read.csv("https://www.uv.es/uriel/texto/advincen.txt")
data_4 <- read.csv("https://www.uv.es/uriel/texto/advincen.txt", header = T)
data_4
data_4 <- read.csv("https://www.uv.es/uriel/texto/advincen.txt", header = T, sep = " ")
data_4
data_4 <- read.csv("https://www.uv.es/uriel/texto/advincen.txt", header = T, sep = "\t")
data_4
summary(lm.1)
lm.1 <- lm(SALES ~ ADVERT+INCENT, data_4)
summary(lm.1)
cor(data_4$ADVERT, data_4$INCENT)
shiny::runApp('Desktop/project/a8-ruiqiy3')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
titles = list("Calories" = "Calories", "Carbs" ="Carbs(g)", "Protein" = "Protein(g)",
"Fat" = "Fat(g)","Time" = "Time(min)", "Price" = "Price(dollar)")
titles[[Carbs]]
titles[["Carbs"]]
runApp('Desktop/project/Info201-Final_Project')
cat(data_3)
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
data_3
data_3 %>% filter("t2" == 1166)
data_3 %>% filter("t2" == 116)
data_3 %>% filter("t2" == 578)
data_3 %>% filter(t2 == 578)
data_3 %>% filter(as.symbol("t2") == 578)
data_3 %>% filter(as.name("t2") == 578)
data_3 %>% filter(as.name(!!"t2") == 578)
data_3 %>% filter(as.name(!!("t2")) == 578)
data_3 %>% filter(get("t2") == 578)
data_3 %>% filter(get("t2") == 578 & get("t1") == 40)
data_3 %>% filter(get("t2") == 578 & get("t1") == 42)
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
query_parameter <- list("limitLicense" = TRUE, "offset" = 0, "number" = 100,
"minCalories" = 10, "maxCalories" = 1500, "minFat" = 0, "maxFat" = 100,
"minProtein" = 5, "maxProtein" = 100, "addRecipeInformation" = TRUE,
"instructionsRequired" = TRUE)
recipe_key <- "3feeabd627msh661da213da59680p1bff94jsn9f2df977c019"
response <- GET(uri, query = query_parameter, add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, "text")
response_list <- fromJSON(response_text)
uri <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/searchComplex"
response <- GET(uri, query = query_parameter, add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, "text")
response_list <- fromJSON(response_text)
response_list$results$id
id <- response_list$results$id[1]
id <- response_list$results$id[1]
uri_full <- paste0(uri_2, id, "/information")
uri_2 <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/"
uri_full <- paste0(uri_2, id, "/information")
response2 <- GET(uri_full, add_headers("X-RapidAPI-Key" = recipe_key))
response_text2 <- content(response2, "text")
response_list2 <- fromJSON(response_text2)
View(response_list2)
response_list2$analyzedInstructions$steps[["number"]]
response_list2$analyzedInstructions$steps[[1]]
response_list2$analyzedInstructions$steps[[1]]$number
max(response_list2$analyzedInstructions$steps[[1]]$number)
max(response_list2$analyzedInstructions$steps[[1]]$step)
response_list2$analyzedInstructions$steps[[1]]$step
response_list2$analyzedInstructions$steps[[1]]$step[1]
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
View(titles)
response_list2$diets
response_list2$cuisines
unlist(response_list2$cuisines)
Tags <- c(response_list2$diets, response_list2$dishTypes, response_list2$cuisines)
Tags <- c(response_list2$diets, response_list2$dishTypes, unlist(response_list2$cuisines))
Tags
runApp('Desktop/project/Info201-Final_Project')
withTags(div(class = "mytitle", h2(recipe_name)))
withTags(div(class = "mytitle", h2("33")))
withTags(div(class = "mytitle", h2("recipe_name"33)),
div(class = "myTag", for(i in 5){
p("6")
}))
withTags(div(class = "mytitle", h2("recipe_name"33)),
div(class = "myTag", for(i in 5){
p("6")
})
withTags(div(class = "mytitle", h2("recipe_name")),
div(class = "myTag", for(i in 5){
p("6")
}))
withTags(div(class = "mytitle", h2("recipe_name")),
div(class = "myTag", for(i in 5){
p("6")
}))
tags$div(class = "mytitle", h2(recipe_name))
for (i in 1:5) {
tags$p(i)
}
tags$div(class = "mytitle", h2("recipe_name"))
for (i in 1:5) {
tags$p(i)
}
lapply(1:10, function(i){tags$p(i)})
unlist(lapply(1:10, function(i){tags$p(i)}))
runApp('Desktop/project/Info201-Final_Project')
Withtags(p(lapply(1:5, function(i){
"food"
br()})))
withtags(p(lapply(1:5, function(i){
"food"
br()})))
withTags(p(lapply(1:5, function(i){
"food"
br()})))
withtags(p(lapply(1:5, function(i){
food
br()})))
withTags(p(lapply(1:5, function(i){
food
br()})))
withTags(p(lapply(1:5, function(i){
("food")
br()})))
runApp('Desktop/project/Info201-Final_Project')
p(img(src = "Tags-595b40b85ba036ed117da472.svg", width = "5px"),
i(recipe_tag))
p(img(src = "Tags-595b40b85ba036ed117da472.svg", width = "5px"),
(recipe_tag))
p(img(src = "Tags-595b40b85ba036ed117da472.svg", width = "5px"),
("1"))
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
response_list2[["extendedIngredients"]][["image"]]
response_list2[["extendedIngredients"]][["image"]]
response_list2[["extendedIngredients"]][["image"]]
response_list2[["image"]]
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
runApp('Desktop/project/Info201-Final_Project')
source("Tags-595b40b85ba036ed117da472.png")
getwd()
setwd("~/Desktop")
setwd("/Users/Rachel/Desktop/project/Info201-Final_Project")
source("Tags-595b40b85ba036ed117da472.png")
runApp('Desktop/project/Info201-Final_Project')
