breakfast_panel,
lunch_panel,
dinner_panel,
textOutput("calories_total")))))
#server
server <- function(input, output) {
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- reactive(fromJSON(response_text))
calories_one <- response_data()$calories$value
#get data 2
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$lunch) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- reactive(fromJSON(response_text))
calories_two <- response_data()$calories$value
#get data 3
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$dinner) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- reactive(fromJSON(response_text))
calories_three <- response_data()$calories$value
total_calories <- reactive(calories_one + calories_two + calories_three)
output$calories_total <- renderText({
return(paste0("$", total_calories)
)})
#BMI
BMI_cal <- reactive(655.1 + 9.6*weight + 1.9*height- 4.7*age)
output$BMI <- renderText({
return(BMI_cal)
})
}
shinyApp(ui = ui, server = server)
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
#get data 1
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- response_data$calories$value
response_ <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text_one <- content(response, type = "text", encoding = "ISO-8859-1")
response_data_one <- fromJSON(response_text)
response_ <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
response_ <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
calories_one <- response_data$calories$value
View(response_data)
source("api-keys.R")
base_url <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com"
request <- "/recipes"
action <- "/guessNutrition"
endpoint <- paste0(base_url, request, action)
response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key))
response_text <- content(response, type = "text", encoding = "ISO-8859-1")
response_data <- fromJSON(response_text)
View(response_data)
install.packages(plumber)
install.packages("plumber")
library(plumber)
library(shiny); runApp('test.R')
calories_two <- response_data$calories$value
calories_two <- response_data$calories$value
source('~/Desktop/INFO201/project/Final_Project/Info201-Final_Project/test.R')
shinyApp(ui=ui, server=server)
#server
server <- function(input, output, session) {
#get command
output$calories_total <- renderUI ({
breakfast_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$breakfast) )
breakfast_text <- content(breakfast_response, type = "text", encoding = "ISO-8859-1")
breakfast_data <- fromJSON(breakfast_text)
calories_one <- breakfast_data$calories$value
#get data 2
lunch_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$lunch) )
lunch_text <- content(lunch_response, type = "text", encoding = "ISO-8859-1")
lunch_data <- fromJSON(lunch_text)
calories_two <- lunch_data$calories$value
#get data 3
dinner_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = input$dinner) )
dinner_text <- content(dinner_response, type = "text", encoding = "ISO-8859-1")
dinner_data <- fromJSON(dinner_text)
calories_three <- dinner_data$calories$value
total_calories <- reactive(calories_one + calories_two + calories_three)
return(total_calories) )}
#BMI
BMI_cal <- reactive(655.1 + 9.6*input$weight + 1.9*input$height- 4.7*input$age)
output$BMI <- renderText({
return(BMI_cal)
})
}
library(shiny); runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("btn", "Toggle Textbox"),
textOutput("btn_val"),
uiOutput("textbox_ui")
))
server <- shinyServer(function(input, output, session) {
output$btn_val <- renderPrint(print(input$btn))
textboxToggle <- reactive({
if (input$btn %% 2 == 1) {
textInput("textin", "Write something:", value = "Hello World!")
}
})
output$textbox_ui <- renderUI({ textboxToggle() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
actionButton("btn", "Toggle Textbox"),
textOutput("btn_val"),
uiOutput("textbox_ui")
))
server <- shinyServer(function(input, output, session) {
output$btn_val <- renderPrint(print(input$btn))
textboxToggle <- reactive({
if (input$btn %% 2 == 1) {
textInput("textin", "Write something:", value = "Hello World!")
}
})
output$textbox_ui <- renderUI({ textboxToggle() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
observeEvent(input$add_btn, {counter$n <- counter$n + 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) counter$n <- counter$n - 1
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "Hello World!")
})
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
observeEvent(input$add_btn, {counter$n <- counter$n + 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) counter$n <- counter$n - 1
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "Hello World!")
})
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp('test.R')
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
observeEvent(input$add_btn, {counter$n <- counter$n + 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) counter$n <- counter$n - 1
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "Hello World!")
})
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
library(shiny)
ui <- shinyUI(fluidPage(
sidebarPanel(
actionButton("add_btn", "Add Textbox"),
actionButton("rm_btn", "Remove Textbox"),
textOutput("counter")
),
mainPanel(uiOutput("textbox_ui"))
))
server <- shinyServer(function(input, output, session) {
# Track the number of input boxes to render
counter <- reactiveValues(n = 0)
#Track the number of input boxes previously
prevcount <-reactiveValues(n = 0)
observeEvent(input$add_btn, {
counter$n <- counter$n + 1
prevcount$n <- counter$n - 1})
observeEvent(input$rm_btn, {
if (counter$n > 0) {
counter$n <- counter$n - 1
prevcount$n <- counter$n + 1
}
})
output$counter <- renderPrint(print(counter$n))
textboxes <- reactive({
n <- counter$n
if (n > 0) {
# If the no. of textboxes previously where more than zero, then
#save the text inputs in those text boxes
if(prevcount$n > 0){
vals = c()
if(prevcount$n > n){
lesscnt <- n
isInc <- FALSE
}else{
lesscnt <- prevcount$n
isInc <- TRUE
}
for(i in 1:lesscnt){
inpid = paste0("textin",i)
vals[i] = input[[inpid]]
}
if(isInc){
vals <- c(vals, "New text box")
}
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = vals[i])
})
}else{
lapply(seq_len(n), function(i) {
textInput(inputId = paste0("textin", i),
label = paste0("Textbox", i), value = "New text box")
})
}
}
})
output$textbox_ui <- renderUI({ textboxes() })
})
shinyApp(ui, server)
runApp('test.R')
runApp('test.R')
runApp('test.R')
runApp()
library(shiny)
library(shinyjs)
# variables
intolerace <- c("dairy", "gluten", "caffeine")
home_page <- tabPanel("About Us")
first_page <- tabPanel("Recipes given constraints")
second_page <- tabPanel("Nutrition of Food")
third_page <- tabPanel(
"Recipe from Ingredients",
titlePanel("What can I make?"),
sidebarLayout(
sidebarPanel(
textInput(inputId = "ingredient_1", label = "Ingredient 1", placeholder = "Ingredient 1"),
uiOutput("all_ingredients"),
actionButton("add_ingredient", "Add Ingredient"),
actionButton("search", "Search"),
hr(),
h3("List of Recipes"),
# selectInput(inputId = "intolerace", label = "Intolerance", choices = intolerace),
uiOutput("recipes")
),
mainPanel(
uiOutput("htt")
)
)
)
ui <- tagList(
useShinyjs(),
navbarPage(
"Recipeeeez",
home_page,
first_page,
second_page,
third_page
)
)
library(shiny)
library(shinyjs)
library(httr)
library(jsonlite)
library(dplyr)
source("api-keys.R")
# base & endpoints
recipe_uri <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/"
recipe_endpoint <- "findByIngredients"
generateRecipe <- function(id){
uri_2 <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/"
uri_full <- paste0(uri_2, id, "/information")
response2 <- GET(uri_full, add_headers("X-RapidAPI-Key" = recipe_key))
response_text2 <- content(response2, "text")
response_list2 <- fromJSON(response_text2)
ingredient <- response_list2$extendedIngredients %>%
select(originalString)
image_src <- response_list2$image
Name <- response_list2$title
steps <- response_list2$analyzedInstructions$steps[[1]]$step
for (i in 1:length(steps)) {
steps[i] <- paste0("Step ", i, ":", steps[i])
}
Tags <- c(response_list2$diets, response_list2$dishTypes,
unlist(response_list2$cuisines))
Tag <- paste0(Tags[1])
for(i in 2:length(Tags)){
Tag <- paste0(Tag, ", ", Tags[i])
}
information <- list("ingredient" = ingredient, "image" = image_src,
"name" = Name, "steps" = steps, "tags" = Tag)
}
server <- function(input, output) {
ingredients_list <- tagList()
output$all_ingredients <- renderUI({
counter <- input$add_ingredient
print(counter)
if(is.null(counter) | counter < 1) return()
id <- paste0("ingredient_", counter + 1)
label <- paste0("Ingredient ", counter + 1, ":")
widget <- textInput(id, label)
ingredients_list <<- tagAppendChild(ingredients_list, widget)
if(counter == 4) disable("add_ingredient")
ingredients_list
})
names_to_id <- NULL
#vector of recipe names
recipe_input <- eventReactive(input$search, {
test <- paste(input$ingredient_1, input$ingredient_2, input$ingredient_3, input$ingredient_4, input$ingredient_5, sep = ",")
while(substr(test, nchar(test), nchar(test)) == ",") {
test <- gsub(".$", "", test)
}
param <- list(test)
ingredients <- list(ingredients = param)
response <- GET(paste0(recipe_uri, recipe_endpoint), add_headers("X-RapidAPI-Key" = recipe_key), query = ingredients)
content <- content(response, type = "text")
data <- fromJSON(content)
# make df for names to id
names_to_id <<- data %>%
select(id, title)
# return names
names_to_id$title
})
output$recipes <- renderUI({
ul <- tags$ul()
for(name in recipe_input()) {
li <- tags$li(name)
ul <- tagAppendChild(ul, li)
}
recipe_list <- tagList(ul,
selectInput("recipes", "Choose a Recipe:", choices = names_to_id$title))
recipe_list
})
information <- eventReactive(input$recipes, {
id <- names_to_id[names_to_id$title == input$recipes, ]$id
recipes_data <- generateRecipe(id)
})
output$htt <- renderUI({
recipe_information <- information()
recipe_ingredient <- recipe_information[[1]]
recipe_name <- recipe_information[[3]]
recipe_image <- recipe_information[[2]]
recipe_tag <- recipe_information[[5]]
numIng <- nrow(recipe_ingredient)
recipe_step <- recipe_information[[4]]
numStep <- length(recipe_step)
list(withTags(div(class = "mytitle", h2(recipe_name),
p(img(src =
"https://visualpharm.com/assets/147/Tags-595b40b85ba036ed117da472.svg",
width = "30px"),
em(recipe_tag)), hr()
)),
withTags(div(class = "myIngredient", img(src = recipe_image, width = "400px",
style = "float: none; margin-right: 50px;
margin-bottom: 10px"))),
# I want a fluid page
fluidRow(
column(
4,
withTags(div(
h3("Ingredients:"),
ul(lapply(1:numIng, function(i){
li(recipe_ingredient$originalString[i])
}), style = "list-style-type:disc; list-style-position: inside;")
))
),
column(
4,
offset = 1,
h3("Steps:"), withTags(div(class = "myStep", lapply(1:numStep, function(i){
p(recipe_step[i])
})))
)
)
)
})
output$stepp <- renderUI({
recipe_information <- information()
recipe_step <- recipe_information[[4]]
numStep <- length(recipe_step)
list(h3("Steps:"), withTags(div(class = "myStep", lapply(1:numStep, function(i){
p(recipe_step[i])
}))))
})
}
shinyApp(ui=ui, server=server)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
install.packages("shinyWidgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
