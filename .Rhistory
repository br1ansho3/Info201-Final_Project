shiny::runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
a <- data.frame(c(1,1,1), c(2,2,2))
b <- data.frame(c(3,3,3), c(4,4,4))
c <- rbind(a,b)
a <- data.frame(c(a,b,c), c(2,2,2))
b <- data.frame(c(a,b,c), c(4,4,4))
a <- data.frame(c(x,y,z), c(2,2,2))
b <- data.frame(c(x,y,z), c(4,4,4))
a <- data.frame(c("x","y","z"), c(2,2,2))
b <- data.frame(c("x","y","z"), c(4,4,4))
c <- rbind(a,b)
a <- data.frame(c("x","y","z"), c(2,2,2))
b <- data.frame(c("x","y","z"), c(4,4,4))
c <- rbind(a,b, c("x","y","z"))
View(a)
View(b)
c <- rbind(a,b, c("x","y","z"))
a <- data.frame(name = c("x","y","z"), value = c(2,2,2))
b <- data.frame(name = c("x","y","z"), value = c(4,4,4))
c <- rbind(a,b, name)
b <- data.frame(name = c("x","y","z"), value = c(4,4,4))
c <- bind_column(a,b, name)
library(dplyr)
a <- data.frame(name = c("x","y","z"), value = c(2,2,2))
b <- data.frame(name = c("x","y","z"), value = c(4,4,4))
c <- bind_column(a,b, name)
a <- data.frame(name = c("x","y","z"), value = c(2,2,2))
b <- data.frame(name = c("x","y","z"), value = c(4,4,4))
c <- bind_cols(a,b, name)
a <- data.frame(name = c("x","y","z"), value = c(2,2,2))
b <- data.frame(name = c("x","y","z"), value = c(4,4,4))
c <- bind_cols(a,b)
View(c)
b <- data.frame(name = c("x","y","z"), value = c(4,4,4))
c <- bind_rows(a,b)
runApp()
c <- bind_rows(a,b)
d <- aggregate(cbind(Value) ~ name, data=c, FUN=sum)
c <- bind_rows(a,b)
d <- aggregate(cbind(value) ~ name, data=c, FUN=sum)
View(d)
nutrition_table <- function(dish){
nutrition_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = dish) )
nutrition_response_text <- content(nutrition_response, type = "text", encoding = "ISO-8859-1")
nutrition_response_data <- fromJSON(nutrition_response_text)
calories <- nutrition_response_data$calories$value
fat <- nutrition_response_data$fat$value
protein <- nutrition_response_data$protein$value
carbs <- nutrition_response_data$carbs$value
nutrition_list <- c(calories,fat,protein,carbs)
nutrition_table <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = nutrition_list)
return(nutrition_table)
a<- nutrition_table("Spaghetti")
nutrition_table <- function(dish){
nutrition_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = dish) )
nutrition_response_text <- content(nutrition_response, type = "text", encoding = "ISO-8859-1")
nutrition_response_data <- fromJSON(nutrition_response_text)
calories <- nutrition_response_data$calories$value
fat <- nutrition_response_data$fat$value
protein <- nutrition_response_data$protein$value
carbs <- nutrition_response_data$carbs$value
nutrition_list <- c(calories,fat,protein,carbs)
nutrition_table <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = nutrition_list)
return(nutrition_table)}
a<- nutrition_table("Spaghetti")
dd
stop()
dasdfk;dj
nutrition_table <- function(dish){
nutrition_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = dish) )
nutrition_response_text <- content(nutrition_response, type = "text", encoding = "ISO-8859-1")
nutrition_response_data <- fromJSON(nutrition_response_text)
calories <- nutrition_response_data$calories$value
fat <- nutrition_response_data$fat$value
protein <- nutrition_response_data$protein$value
carbs <- nutrition_response_data$carbs$value
nutrition_list <- c(calories,fat,protein,carbs)
nutrition_table <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = nutrition_list)
return(nutrition_table)}
a<- nutrition_table("Spaghetti")
recipe_uri <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/"
recipe_endpoint <- "findByIngredients"
nutrition_action <- "guessNutrition"
nutrition_endpoint <- paste0(recipe_uri,nutrition_action)
nutrition_table <- function(dish){
nutrition_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = dish) )
nutrition_response_text <- content(nutrition_response, type = "text", encoding = "ISO-8859-1")
nutrition_response_data <- fromJSON(nutrition_response_text)
calories <- nutrition_response_data$calories$value
fat <- nutrition_response_data$fat$value
protein <- nutrition_response_data$protein$value
carbs <- nutrition_response_data$carbs$value
nutrition_list <- c(calories,fat,protein,carbs)
nutrition_table <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = nutrition_list)
return(nutrition_table)
}
a <- nutrition_table("Spaghetti")
library(shiny)
library(dplyr)
library(ggplot2)
library(plotly)
source("api-keys.R")
library(jsonlite)
library(httr)
library(RColorBrewer)
library(shinyjs)
library(DT)
recipe_uri <- "https://spoonacular-recipe-food-nutrition-v1.p.rapidapi.com/recipes/"
recipe_endpoint <- "findByIngredients"
nutrition_action <- "guessNutrition"
nutrition_endpoint <- paste0(recipe_uri,nutrition_action)
nutrition_table <- function(dish){
nutrition_response <- GET(endpoint,
add_headers("X-RapidAPI-Key" = recipe_key),
query = list(title = dish) )
nutrition_response_text <- content(nutrition_response, type = "text", encoding = "ISO-8859-1")
nutrition_response_data <- fromJSON(nutrition_response_text)
calories <- nutrition_response_data$calories$value
fat <- nutrition_response_data$fat$value
protein <- nutrition_response_data$protein$value
carbs <- nutrition_response_data$carbs$value
nutrition_list <- c(calories,fat,protein,carbs)
nutrition_table <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = nutrition_list)
return(nutrition_table)
}
a <- nutrition_table("Spaghetti")
View(a)
is.dataframe(a)
is.data.frame(a)
a <- nutrition_table("Spaghetti")
b <- nutrition_table("Burger")
View(b)
nutrition_cal <- bind_rows(dish1_cal, dish2_cal)
b <- nutrition_table("Burger")
nutrition_cal <- bind_rows(a, b)
nutrition_table_total <- aggregate(cbind(Value) ~ Nutrition, data=nutrition_cal, FUN=sum)
nutrition_table <- datatable(nutrition_table_total)
View(nutrition_table)
View(nutrition_table_total)
View(nutrition_table)
runApp()
shiny::runApp()
install.packages("DT")
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
home_page <- tabPanel(
"About Us",
fluidPage(
titlePanel(h2("About Us", style = "color:#9CBFC1")),
sidebarLayout(
sidebarPanel(
style = "background-color: #FFFFF0; border:hidden #FFFFF0;
color:#9CBFC1",
img(
src = "https://media.licdn.com/dms/image/C5603AQH1WCRU6fKPkw/profile-displayphoto-shrink_200_200/0?e=1557964800&v=beta&t=y6uk2g4kjGyAR6XBO0g6gwmu1AGI7JpzecEo8lSBtfE",
style = "display: block; margin-left: auto; margin-right: auto;",
width = "100x"
),
h3("Henry Bates"), "Hello! I'm Henry and I'm a Junior in the
Environmental Science program. I came to Informatics
because I want to learn how I can better apply data
visualization to my field. Enjoy some new recipes!",
br(),
br(),
"Email: batesh2@uw.edu",
hr(),
img(
src = "https://media.licdn.com/dms/image/C5603AQHht_LSnn3rKA/profile-displayphoto-shrink_800_800/0?e=1557964800&v=beta&t=uVI8QhDBDtoYcrvOImXm56yO8sErTJ5bCQ5MTCeemwk",
style = "display: block; margin-left: auto; margin-right: auto;",
width = "100px"
),
h3("Brian Hsu"), "Hi, my name is Brian. I'm a Junior studying
Mathematics. I'm taking this class because I love UI
design and hope to double major in Informatics. We
hope you find some food youve never even thought to
cook before.",
br(),
br(),
"Email: brianhsu@uw.edu",
hr(),
img(
src = "https://s3.amazonaws.com/handshake.production/app/public/assets/students/13154183/profile/data.?1542575324",
style = "display: block; margin-left: auto; margin-right: auto;",
width = "100x"
),
h3("Ruiqi Yan"), "Hello! I am Rachel, a Senior in Statistics Major at
the University of Washington. I choose recipes as
topic of my final project because I am really
interested in exploring delicacy. Informatics taught
me a lot about data visualization and R application,
which well relates to my field. Stay healthy and enjoy
these various recipes!",
br(),
br(),
"Email: ruiqiy3@uw.edu",
hr(),
img(
src = "https://scontent-sea1-1.xx.fbcdn.net/v/t1.0-9/20638469_495476044137055_2569655792785378768_n.jpg?_nc_cat=101&_nc_ht=scontent-sea1-1.xx&oh=4e80be0cbc3b8bf64b148f3289388850&oe=5D259B7F",
style = "display: block; margin-left: auto; margin-right: auto;",
width = "100x"
),
h3("Chunmo Chen "), "Hi! I'm Mary and I'm a senior in the Neurobiology
Major. The informatics classes are so cool and I
want to learn more about how to present and analyze
lab data. It is also so fun to use API's and study
about recipes for every day! Bon Appetit! ",
br(),
br(),
"Email: ccm1997@uw.edu",
hr(),
width = 2
),
mainPanel(
style = "color:#9CBFC1",
h1("What Recipes Can You Find?"),
img(
src = "https://www.bi-lo.com/-/media/media/whatsnew/14_italian_brochure_spaghettimeatballs_028_banner.png?la=en&mw=1382",
width = "1000px",
height = "300px",
style = "display: block; margin-left: auto; margin-right: auto;"
),
h2("A Classic for Everyone"), h4(em("Spaghetti with meatballs is a
classic dish loved by many. However
many people around the world are
vegatarian or don't have all the
ingredients available to them.
Click on our",
strong("Recipes from Ingredients"),
"tab above to find dishes that work
just for you or your family when
you enter the ingredients you want
to use!"
)),
hr(),
img(
src = "https://i0.wp.com/sautemagazine.com/wp-content/uploads/2018/01/Pimp-My-Noodles_10-MINUTE-RAMEN-banner.jpg?ssl=1",
width = "1000px",
height = "300px",
style = "display: block; margin-left: auto; margin-right: auto;"
),
h2("Staying Healthy"), h4(em("It can be tough to resist a big bowl of
ramen everyday but we can't eat everything
that we want and stay healthy. It can be
tough to find out the nurtional value of
prepared dishes so we provide that under
the", strong("Nutrition of Food"), "tab
above. Search for a dish or food and
explore the nutritional content and start
planning a great diet today!")),
hr(),
img(
src = "https://hips.hearstapps.com/del.h-cdn.co/assets/18/11/2048x1024/landscape-1520956952-chicken-tacos-horizontal.jpg?resize=1200:*",
width = "1000px",
height = "300px",
style = "display: block; margin-left: auto; margin-right: auto;"
),
h2("Adding a Personal Touch"), h4(em("Finding the foods that agree with
you and your eating goals can be
tricky. The", strong("Recipes from
Nutrition"), "tab allows you to
set your needs to specific
nutritional amounts. Then you can
explore the recipes that will
leave you feeling ready for
anything!")),
hr(),
img(
src = "http://www.edwinascatering.com/images/banner-food.jpg",
width = "1000px",
height = "300px",
style = "display: block; margin-left: auto; margin-right: auto;"
),
h2("Where We Find the Recipes"), h4(em("We sourced our data from an API
run by", strong("Spoonacular"),
". This allows us to provide the
coolest new recipes that work
for even the pickiest eaters.
Let us know what the coolest
dish you find is!",
br(),
hr(),
h3("Thanks for visiting!")
))
)
)
)
)
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
<<<<<<< HEAD
=======
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dish1_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,1))
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- merge(dish1_cal, dish2_cal)
View(nutrition_cal)
View(dish2_cal)
View(nutrition_cal)
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- cbind(dish1_cal, dish2_cal)
dish1_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,1))
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- cbind(dish1_cal, dish2_cal)
View(nutrition_cal)
dish1_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,1))
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- merge(dish1_cal, dish2_cal, by = Nutrition)
dish1_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,1))
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- merge(dish1_cal, dish2_cal, by = "Nutrition")
View(nutrition_cal)
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- rbind(dish1_cal, dish2_cal)
View(nutrition_cal)
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- merge.data.frame(dish1_cal, dish2_cal, by = "Nutrition")
View(nutrition_cal)
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- merge.data.frame(dish1_cal, dish2_cal, by = "Nutrition")
nutrition_table_total <- aggregate(cbind(Value) ~ Nutrition, data=nutrition_cal, FUN=sum)
View(nutrition_cal)
nutrition_cal <- bind_rows(dish1_cal, dish2_cal)
nutrition_table_total <- aggregate(cbind(Value) ~ Nutrition, data=nutrition_cal, FUN=sum)
View(nutrition_cal)
nutrition_cal <- rbind(dish1_cal, dish2_cal)
View(nutrition_cal)
nutrition_table_total <- aggregate(cbind(Value) ~ Nutrition, data=nutrition_cal, FUN=sum)
View(nutrition_table_total)
dish1_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,1))
dish2_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
dish3_cal <- data.frame(Nutrition = c("Calories", "Fat", "Protein","Carbs"),
Value = c(2,3,4,2))
nutrition_cal <- rbind(dish1_cal, dish2_cal, dish3_cal)
nutrition_table_total <- aggregate(cbind(Value) ~ Nutrition, data=nutrition_cal, FUN=sum)
View(nutrition_cal)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
<<<<<<< HEAD
>>>>>>> 51ecf8d5359618b3898ffe5e5323da0ed618057b
shiny::runApp()
runApp()
=======
shiny::runApp()
runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
runApp()
shiny::runApp()
runApp('~/Desktop/INFO201/project/Final_Project/Info201-Final_Project')
shiny::runApp()
runApp()
runApp()
install.packages("rapport")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(lintr)
lint_package("server.R")
lint("server.R")
shiny::runApp()
runApp()
runApp()
>>>>>>> a41e8e1005e9934ce87680ad08080a5451e752b3
?selectInput
shiny::runApp()
install.packages("rapport")
runApp()
runApp()
runApp()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
data
runApp()
data
source('~/.active-rstudio-document', echo=TRUE)
data
runApp()
